from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from bot.logic.order_flow import create_order, set_contact_info, confirm_order

def handle_order_start(update: Update, context: CallbackContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–ó–∞–∫–∞–∑–∞—Ç—å' ‚Äì –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è."""
    query = update.callback_query
    query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    context.user_data["order_step"] = 0

def process_order_step(update: Update, context: CallbackContext):
    """
    –ü–æ—à–∞–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:
      –®–∞–≥ 0: –ò–º—è
      –®–∞–≥ 1: –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
      –®–∞–≥ 2: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
      –®–∞–≥ 3: –í—ã–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ (inline –∫–Ω–æ–ø–∫–∏)
      –®–∞–≥ 4: –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∏ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–î–∞")
      –®–∞–≥ 5: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    user_data = context.user_data
    step = user_data.get("order_step", 0)
    text = update.message.text.strip()

    if step == 0:
        user_data["name"] = text
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        user_data["order_step"] = 1

    elif step == 1:
        user_data["address"] = text
        update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
            "–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "- 27.03.2025 14:00\n"
            "- —Å–µ–≥–æ–¥–Ω—è 14:00\n"
            "- –∑–∞–≤—Ç—Ä–∞ 09:00"
        )
        user_data["order_step"] = 2

    elif step == 2:
        user_data["datetime"] = text
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞", callback_data="add_card_yes"),
             InlineKeyboardButton("–ù–µ—Ç", callback_data="add_card_no")]
        ])
        update.message.reply_text("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É?", reply_markup=keyboard)
        user_data["order_step"] = 3

    elif step == 3:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∏.")
        return

    elif step == 4:
        user_data["card_text"] = text
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ):")
        user_data["order_step"] = 5

    elif step == 5:
        user_data["phone"] = text
        try:
            idx = user_data["current_bouquet"]
            chosen_bouquet = user_data["bouquets"][idx]
            order_data = create_order(chosen_bouquet)
            order_data = set_contact_info(
                order_data,
                user_data["name"],
                user_data["address"],
                user_data["phone"],
                user_data["datetime"]
            )
            if "card_text" in user_data:
                order_data["card_text"] = user_data["card_text"]
            order_data["status"] = "confirmed"
            confirm_order(order_data)
            send_order_to_courier(context, order_data)
            update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
            user_data.clear()
        except ValueError as e:
            update.message.reply_text(
                f"‚ùå {str(e)}\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."
            )
    else:
        user_data.clear()

def handle_card_choice(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–î–∞" (callback_data="add_card_yes"), –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ –Ω–∞ —à–∞–≥ 4.
    –ï—Å–ª–∏ "–ù–µ—Ç" (callback_data="add_card_no") ‚Äì —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—à–∞–≥ 5).
    """
    query = update.callback_query
    data = query.data
    user_data = context.user_data

    if data == "add_card_yes":
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏:")
        user_data["order_step"] = 4
    elif data == "add_card_no":
        user_data.pop("card_text", None)
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ):")
        user_data["order_step"] = 5
    else:
        query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

def send_order_to_courier(context: CallbackContext, order_data: dict):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –∫—É—Ä—å–µ—Ä—É.
    """
    from bot.handlers.handlers_config import COURIER_ID
    if not COURIER_ID:
        print("COURIER_ID –Ω–µ –∑–∞–¥–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    text = (
        "üöö –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"–ò–º—è: {order_data['customer_name']}\n"
        f"–ê–¥—Ä–µ—Å: {order_data['address']}\n"
        f"–î–∞—Ç–∞: {order_data['delivery_time']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order_data['phone']}\n"
        f"–ë—É–∫–µ—Ç: {order_data['bouquet_name']} (–¶–µ–Ω–∞: {order_data['price']}‚ÇΩ)\n"
    )
    context.bot.send_message(chat_id=COURIER_ID, text=text)
